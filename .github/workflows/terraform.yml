name: 'Terraform to create vpc and ec2 instance'

on:
  workflow_dispatch:
    branches: [ "qa" ]
  pull_request:

permissions:
  contents: read
  id-token: write

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: qa

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        working-directory: ./staging
      
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # AWS login sections
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with: 
        role-to-assume: arn:aws:iam::484315828500:role/AssumeRoleWithWebIdentityAdmin
        audience: sts.amazonaws.com
        role-session-name: sessionfeenixdv
        aws-region: us-east-1

    - name: Print assume role name
      run: aws sts get-caller-identity
    
    - name: List s3 bucket
      run: aws s3 ls
    
    # - name: List s3 bucket
    #   run: aws s3 ls
    # # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      #working-directory: ./staging

    # # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    # - name: Terraform Plan
    #   run: terraform plan -input=false

    #   # On push to "main", build or change infrastructure according to Terraform configuration files
    #   # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    # - name: Terraform Apply
    #   if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
    #   run: terraform apply -auto-approve -input=false
